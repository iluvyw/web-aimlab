{"version":3,"sources":["components/PlayScreen.jsx","App.js","index.js"],"names":["getRandomArbitrary","min","max","Math","floor","random","x","SCREEN_WIDTH","y","SCREEN_HEIGHT","mouseX","mouseY","PlayScreen","setPoint","setTotal","useState","number","setNumber","tempPoint","setTempPoint","useEffect","setTimeout","a","console","log","onClick","e","nativeEvent","offsetX","offsetY","handleClick","className","style","position","left","top","width","height","backgroundColor","borderRadius","border","zIndex","App","point","total","window","location","reload","href","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yPAQMA,EAAqB,SAACC,EAAKC,GAC7B,OAAOC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,GAAOA,IAGhDK,EAAIN,EAAmB,GAAIO,MAC3BC,EAAIR,EAAmB,GAAIS,KAC3BC,EAAS,EACTC,EAAS,EAEE,SAASC,EAAT,GAA6C,IAAvBC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,SAC3C,EAA4BC,mBAAS,GAArC,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAAiCF,mBAAS,GAA1C,mBAAOG,EAAP,KAAiBC,EAAjB,KAyBA,OAZAC,qBAAU,WACNC,WAAU,sBAAC,sBAAAC,EAAA,2DACHN,EA7BF,IA4BK,iDAEPF,EAASE,GACTV,EAAIN,EA9BD,GA8B4BO,MAC/BC,EAAIR,EA/BD,GA+B4BS,KAC/Bc,QAAQC,IAAIlB,EAAEE,EAAEQ,GAChBC,GAAU,SAAAD,GAAM,OAAIA,EAAS,KANtB,2CAOR,KACHH,EAASK,KACV,CAACF,IAGA,qBAAKS,QAAS,SAACC,GAAD,OAxBE,SAACA,GACjBhB,EAASgB,EAAEC,YAAYC,QACvBjB,EAASe,EAAEC,YAAYE,QACnBvB,EAAE,GAAKI,GAAUA,EAASJ,EAAE,IACxBE,EAAE,GAAKG,GAAUA,EAASH,EAAE,IAC5BW,GAAa,SAAAD,GAAS,OAAIA,EAAY,KAG9CK,QAAQC,IAAId,EAAOC,EAAOL,EAAEE,GAgBPsB,CAAYJ,IAAIK,UAAU,cAA/C,SACMf,EAAS,GAAM,qBACbgB,MAAO,CACHC,SAAU,WACVC,KAAK,GAAD,OAAK5B,EAAL,MACJ6B,IAAI,GAAD,OAAK3B,EAAL,MACH4B,MAAO,OACPC,OAAQ,OACRC,gBAAiB,MACjBC,aAAc,QACdC,OAAQ,cACRC,OAAQ,UC3BbC,MAzBf,WACE,MAA0B3B,mBAAS,GAAnC,mBAAO4B,EAAP,KAAc9B,EAAd,KACA,EAA0BE,mBAAS,GAAnC,mBAAO6B,EAAP,KAAc9B,EAAd,KAMA,OACE,sBAAKiB,UAAU,MAAf,UACE,cAAC,EAAD,CAAYlB,SAAUA,EAAUC,SAAUA,IAC1C,sBAAKiB,UAAU,cAAf,UACE,yCAAYY,KACZ,sBAAKZ,UAAU,kBAAf,UACE,wBAAQN,QAAS,WATvBoB,OAAOC,SAASC,QAAO,IASjB,qBACA,mBAAGC,KAAK,4BAAR,SACE,wDAGJ,yCAAYJ,YCnBpBK,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.bcbf8762.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport './PlayScreen.css'\n\nconst SCREEN_HEIGHT = 660\nconst SCREEN_WIDTH = 1440\nconst TOTAL = 30\nconst MARGIN = 40\n\nconst getRandomArbitrary = (min, max) => {\n    return Math.floor(Math.random() * (max - min) + min);\n}\n\nlet x = getRandomArbitrary(30, SCREEN_WIDTH - 30)\nlet y = getRandomArbitrary(30, SCREEN_HEIGHT - 40)\nlet mouseX = 0\nlet mouseY = 0\n\nexport default function PlayScreen({ setPoint, setTotal }) {\n    const [number, setNumber] = useState(0)\n    const [tempPoint,setTempPoint] = useState(0)\n\n    const handleClick = (e) => {\n        mouseX = e.nativeEvent.offsetX\n        mouseY = e.nativeEvent.offsetY\n        if (x-30 < mouseX && mouseX < x+30){\n            if (y-30 < mouseY && mouseY < y+30){\n                setTempPoint(tempPoint => tempPoint + 1)\n            }\n        }\n        console.log(mouseX,mouseY,x,y)\n    }\n\n    useEffect(() => {\n        setTimeout(async () => {\n            if (number > TOTAL) return\n            setTotal(number)\n            x = getRandomArbitrary(MARGIN, SCREEN_WIDTH - MARGIN)\n            y = getRandomArbitrary(MARGIN, SCREEN_HEIGHT - MARGIN)\n            console.log(x,y,number)\n            setNumber(number => number + 1)\n        }, 800)\n        setPoint(tempPoint)\n    }, [number])\n\n    return (\n        <div onClick={(e) => handleClick(e)} className='play-screen'>\n            {(number > 0) && <div\n                style={{\n                    position: \"absolute\",\n                    left: `${x}px`,\n                    top: `${y}px`,\n                    width: '30px',\n                    height: '30px',\n                    backgroundColor: 'red',\n                    borderRadius: '100px',\n                    border: 'solid black',\n                    zIndex: '-1'\n                }}\n            ></div>}\n        </div>\n    )\n}\n","import { useState } from 'react';\nimport './App.css';\nimport PlayScreen from './components/PlayScreen';\n\nfunction App() {\n  const [point, setPoint] = useState(0)\n  const [total, setTotal] = useState(0)\n\n  const refreshPage = () => {\n    window.location.reload(false);\n  }\n\n  return (\n    <div className='app'>\n      <PlayScreen setPoint={setPoint} setTotal={setTotal} />\n      <div className='information'>\n        <h1>Point: {point}</h1>\n        <div className='small-container'>\n          <button onClick={() => refreshPage()}>Restart</button>\n          <a href='https://github.com/iluvyw'>\n            <h1>AIM LAB by ILUVYW</h1>\n          </a>\n        </div>\n        <h1>Total: {total}</h1>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}